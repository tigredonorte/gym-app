name: gym

services:
  nginx:
    build:
      context: .
      dockerfile: ./infra/nginx/Dockerfile.nginx
    ports:
      - "80:80"
    restart: always
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - gym-network

  web:
    build:
      context: .
      dockerfile: ./apps/gym-web-app/Dockerfile
    restart: always
    networks:
      - gym-network
    expose:
      - "80"
    develop:
      watch:
        # Sync changes from the local web app source directory to the container
        - action: sync
          path: ./apps/gym-web-app # Local path to your web app source code
          target: /app            # Path inside the container where web app code lives
          ignore:
            - node_modules/ # Ignore node_modules for performance
            - dist/
            - .env
            - .doppler.env
        # Rebuild the image if package.json or pnpm-lock.yaml changes
        - action: rebuild
          path: ./apps/gym-web-app/package.json
        - action: rebuild
          path: ./apps/gym-web-app/pnpm-lock.yaml

  api:
    build:
      context: .
      dockerfile: ./apps/gym-api/Dockerfile
    healthcheck:
      test: ["CMD", "node", "./infra/api/healthcheck.js"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 1m
      start_interval: 10s
    restart: always
    networks:
      - mongo-cluster
      - gym-network
    depends_on:
      - mongo1
    links:
      - mongo1
    expose:
      - "3000"
      - "5000"
    develop:
      watch:
        # Sync changes from the local API source directory to the container
        - action: sync
          path: ./apps/gym-api # Local path to your API source code
          target: /usr/src/app # Path inside the container where API code lives (adjust if different)
          ignore:
            - node_modules/
            - dist/
            - .env
            - .doppler.env
        # Rebuild the image if package.json or pnpm-lock.yaml changes
        - action: rebuild
          path: ./apps/gym-api/package.json
        - action: rebuild
          path: ./apps/gym-api/pnpm-lock.yaml
        - action: sync
          path: ./infra/api/healthcheck.js
          target: ./infra/api/healthcheck.js # Or the path where it's copied inside the container

  workers:
    build:
      context: .
      dockerfile: ./apps/workers/Dockerfile
    healthcheck:
      test: ["CMD", "node", "./infra/workers/healthcheck.js"]
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 1m
      start_interval: 10s
    restart: always
    networks:
      - gym-network
      - mongo-cluster
    depends_on:
      redis:
        condition: service_healthy
    expose:
      - "3333"
    develop:
      watch:
        # Sync changes from the local workers source directory to the container
        - action: sync
          path: ./apps/workers # Local path to your Workers source code
          target: /build      # Path inside the container where worker code lives (adjust if different)
          ignore:
            - node_modules/
            - dist/
            - .env
            - .doppler.env
        # Rebuild the image if package.json or pnpm-lock.yaml changes
        - action: rebuild
          path: ./apps/workers/package.json
        - action: rebuild
          path: ./apps/workers/pnpm-lock.yaml
        # Also watch the healthcheck script if it's external to the main app directory
        - action: sync
          path: ./infra/workers/healthcheck.js
          target: ./infra/workers/healthcheck.js # Or the path where it's copied inside the container

  redis:
    image: redis:latest
    ports:
      - "6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - gym-network

  mongo1:
    build:
      context: .
      dockerfile: ./infra/mongo/Dockerfile.mongo
    hostname: mongo1
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_DB=${MONGO_DB}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_ENABLE_REPLICA_SET=${MONGO_ENABLE_REPLICA_SET}
      - MONGO_ALLOW_EXTERNAL_CONNECTIONS=${MONGO_ALLOW_EXTERNAL_CONNECTIONS}
    healthcheck:
      test: ["CMD", "bash", "./healthcheck.sh"]
      interval: 30s
      timeout: 20s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - mongo-cluster
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - mongo1_db:/data/db
      - mongo1_configdb:/data/configdb

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    command: start --import-realm
    entrypoint: /opt/keycloak/bin/entrypoint.sh
    environment:
      - KC_DB_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_HOSTNAME_URL=http://${KC_HOSTNAME}:${NGINX_HOST_PORT}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./infra/keycloak/entrypoint.sh:/opt/keycloak/bin/entrypoint.sh
      - ./keycloak-config:/opt/keycloak/data/import
    env_file:
      - .env
      - .doppler.env
    ports:
      - "${KEYCLOAK_PORT}"
      - "9000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gym-network
      - auth-network

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}"
    env_file:
      - .env
      - .doppler.env
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis-data:
    driver: local
  pgdata:
  mongo1_db:
  mongo1_configdb:

networks:
  gym-network:
  mongo-cluster:
  auth-network:
    driver: bridge
